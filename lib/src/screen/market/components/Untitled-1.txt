
/// bar target chart

import 'dart:math';

import 'package:charts_painter/chart.dart';
import 'package:example/widgets/chart_options.dart';
import 'package:example/widgets/toggle_item.dart';
import 'package:flutter/material.dart';

import '../widgets/bar_chart.dart';

class BarTargetChartScreen extends StatefulWidget {
  BarTargetChartScreen({Key? key}) : super(key: key);

  @override
  _BarTargetChartScreenState createState() => _BarTargetChartScreenState();
}

class _BarTargetChartScreenState extends State<BarTargetChartScreen> {
  List<BarValue> _values = <BarValue>[];
  double targetMax = 0;
  double targetMin = 0;
  bool _showValues = false;
  bool _smoothPoints = false;
  bool _showLine = false;
  int minItems = 6;

  @override
  void initState() {
    super.initState();
    _updateValues();
  }

  void _updateValues() {
    final Random _rand = Random();
    final double _difference = _rand.nextDouble() * 10;
    targetMax = 5 +
        ((_rand.nextDouble() * _difference * 0.75) - (_difference * 0.25))
            .roundToDouble();
    _values.addAll(List.generate(minItems, (index) {
      return BarValue<void>(
          targetMax * 0.4 + _rand.nextDouble() * targetMax * 0.9);
    }));
    targetMin = targetMax - ((_rand.nextDouble() * 3) + (targetMax * 0.2));
  }

  void _addValues() {
    _values = List.generate(minItems, (index) {
      if (_values.length > index) {
        return _values[index];
      }

      return BarValue<void>(
          targetMax * 0.4 + Random().nextDouble() * targetMax * 0.9);
    });
  }

  @override
  Widget build(BuildContext context) {
    final _targetDecoration = TargetLineDecoration(
      target: targetMax,
      colorOverTarget: Theme.of(context).colorScheme.error,
      targetLineColor: Theme.of(context).colorScheme.error,
    );

    return Scaffold(
      appBar: AppBar(
        title: Text(
          'Target line decoration',
        ),
      ),
      body: Column(
        children: [
          Center(
            child: Padding(
              padding: const EdgeInsets.all(12.0),
              child: BarChart(
                data: _values,
                height: MediaQuery.of(context).size.height * 0.4,
                dataToValue: (BarValue value) => value.max ?? 0,
                itemOptions: BarItemOptions(
                  padding: const EdgeInsets.symmetric(horizontal: 2.0),
                  minBarWidth: 4.0,
                  barItemBuilder: (data) {
                    return BarItem(
                      color: _targetDecoration.getTargetItemColor(
                          Theme.of(context).colorScheme.primary, data.item),
                      radius: const BorderRadius.vertical(
                        top: Radius.circular(24.0),
                      ),
                    );
                  },
                ),
                backgroundDecorations: [
                  GridDecoration(
                    showVerticalGrid: true,
                    showHorizontalValues: _showValues,
                    showVerticalValues: _showValues,
                    showTopHorizontalValue: _showValues,
                    horizontalAxisStep: 1,
                    verticalAxisStep: 1,
                    textStyle: Theme.of(context).textTheme.caption,
                    gridColor: Theme.of(context)
                        .colorScheme
                        .primaryContainer
                        .withOpacity(0.2),
                  ),
                  _targetDecoration,
                ],
                foregroundDecorations: [
                  SparkLineDecoration(
                    lineWidth: 4.0,
                    lineColor: Theme.of(context)
                        .primaryColor
                        .withOpacity(_showLine ? 1.0 : 0.0),
                    smoothPoints: _smoothPoints,
                  ),
                  TargetLineLegendDecoration(
                    legendDescription: 'Target line ðŸ‘‡',
                    legendTarget: targetMax,
                    legendStyle: Theme.of(context)
                        .textTheme
                        .overline!
                        .copyWith(fontSize: 14),
                    padding: EdgeInsets.only(top: -8),
                  ),
                  BorderDecoration(
                    endWithChart: true,
                    sidesWidth: Border.symmetric(
                        vertical: BorderSide(width: 2.0),
                        horizontal: BorderSide(width: 4.0)),
                    color: Theme.of(context)
                        .colorScheme
                        .primaryContainer
                        .withOpacity(0.4),
                  ),
                ],
              ),
            ),
          ),
          Flexible(
            child: ChartOptionsWidget(
              onRefresh: () {
                setState(() {
                  _values.clear();
                  _updateValues();
                });
              },
              onAddItems: () {
                setState(() {
                  minItems += 4;
                  _addValues();
                });
              },
              onRemoveItems: () {
                setState(() {
                  if (_values.length > 4) {
                    minItems -= 4;
                    _values.removeRange(_values.length - 4, _values.length);
                  }
                });
              },
              toggleItems: [
                ToggleItem(
                  title: 'Axis values',
                  value: _showValues,
                  onChanged: (value) {
                    setState(() {
                      _showValues = value;
                    });
                  },
                ),
                ToggleItem(
                  value: _showLine,
                  title: 'Show line decoration',
                  onChanged: (value) {
                    setState(() {
                      _showLine = value;
                    });
                  },
                ),
                ToggleItem(
                  value: _smoothPoints,
                  title: 'Smooth line curve',
                  onChanged: (value) {
                    setState(() {
                      _smoothPoints = value;
                    });
                  },
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}




import 'dart:math';

import 'package:charts_painter/chart.dart';
import 'package:example/widgets/chart_options.dart';
import 'package:example/widgets/toggle_item.dart';
import 'package:flutter/material.dart';

import '../widgets/bar_chart.dart';

class BarChartScreen extends StatefulWidget {
  BarChartScreen({Key? key}) : super(key: key);

  @override
  _BarChartScreenState createState() => _BarChartScreenState();
}

class _BarChartScreenState extends State<BarChartScreen> {
  List<BarValue<void>> _values = <BarValue<void>>[];
  double targetMax = 0;
  double targetMin = 0;
  bool _showValues = false;
  bool _smoothPoints = false;
  bool _colorfulBars = false;
  bool _showLine = false;
  int minItems = 6;
  bool _legendOnEnd = true;
  bool _legendOnBottom = true;

  @override
  void initState() {
    super.initState();
    _updateValues();
  }

  void _updateValues() {
    final Random _rand = Random();
    final double _difference = _rand.nextDouble() * 10;
    targetMax = 5 +
        ((_rand.nextDouble() * _difference * 0.75) - (_difference * 0.25))
            .roundToDouble();
    _values.addAll(List.generate(minItems, (index) {
      return BarValue<void>(
          targetMax * 0.4 + _rand.nextDouble() * targetMax * 0.9);
    }));
    targetMin = targetMax - ((_rand.nextDouble() * 3) + (targetMax * 0.2));
  }

  void _addValues() {
    _values = List.generate(minItems, (index) {
      if (_values.length > index) {
        return _values[index];
      }

      return BarValue<void>(
          targetMax * 0.4 + Random().nextDouble() * targetMax * 0.9);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          'Bar chart',
        ),
      ),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(12.0),
            child: BarChart(
              data: _values,
              height: MediaQuery.of(context).size.height * 0.4,
              dataToValue: (BarValue value) => value.max ?? 0.0,
              itemOptions: BarItemOptions(
                padding: const EdgeInsets.symmetric(horizontal: 2.0),
                minBarWidth: 4.0,
                barItemBuilder: (data) {
                  final colorForValue = Colors.accents[data.itemIndex % 15];
                  return BarItem(
                    radius: const BorderRadius.vertical(
                      top: Radius.circular(24.0),
                    ),
                    color: _colorfulBars
                        ? colorForValue
                        : Theme.of(context).colorScheme.primary,
                  );
                },
              ),
              backgroundDecorations: [
                GridDecoration(
                  showHorizontalValues: _showValues,
                  showVerticalValues: _showValues,
                  showTopHorizontalValue: _legendOnBottom ? _showValues : false,
                  horizontalLegendPosition: _legendOnEnd
                      ? HorizontalLegendPosition.end
                      : HorizontalLegendPosition.start,
                  verticalLegendPosition: _legendOnBottom
                      ? VerticalLegendPosition.bottom
                      : VerticalLegendPosition.top,
                  horizontalAxisStep: 1,
                  verticalAxisStep: 1,
                  verticalValuesPadding:
                      const EdgeInsets.symmetric(vertical: 4.0),
                  horizontalValuesPadding:
                      const EdgeInsets.symmetric(horizontal: 4.0),
                  textStyle: Theme.of(context).textTheme.caption,
                  gridColor: Theme.of(context)
                      .colorScheme
                      .primaryContainer
                      .withOpacity(0.2),
                ),
                TargetAreaDecoration(
                  targetAreaFillColor:
                      Theme.of(context).colorScheme.error.withOpacity(0.2),
                  targetLineColor: Theme.of(context).colorScheme.error,
                  targetAreaRadius: BorderRadius.circular(12.0),
                  targetMax: targetMax,
                  targetMin: targetMin,
                  colorOverTarget: Theme.of(context).colorScheme.error,
                ),
              ],
              foregroundDecorations: [
                SparkLineDecoration(
                  lineWidth: 4.0,
                  lineColor: Theme.of(context)
                      .primaryColor
                      .withOpacity(_showLine ? 1.0 : 0.0),
                  smoothPoints: _smoothPoints,
                ),
                ValueDecoration(
                  alignment: Alignment.bottomCenter,
                  textStyle: Theme.of(context)
                      .textTheme
                      .button!
                      .copyWith(color: Theme.of(context).colorScheme.onPrimary),
                ),
                BorderDecoration(endWithChart: true)
              ],
            ),
          ),
          Expanded(
            child: ChartOptionsWidget(
              onRefresh: () {
                setState(() {
                  _values.clear();
                  _updateValues();
                });
              },
              onAddItems: () {
                setState(() {
                  minItems += 4;
                  _addValues();
                });
              },
              onRemoveItems: () {
                setState(() {
                  if (_values.length > 4) {
                    minItems -= 4;
                    _values.removeRange(_values.length - 4, _values.length);
                  }
                });
              },
              toggleItems: [
                ToggleItem(
                  title: 'Axis values',
                  value: _showValues,
                  onChanged: (value) {
                    setState(() {
                      _showValues = value;
                    });
                  },
                ),
                ToggleItem(
                  value: _colorfulBars,
                  title: 'Rainbow bar items',
                  onChanged: (value) {
                    setState(() {
                      _colorfulBars = value;
                    });
                  },
                ),
                ToggleItem(
                  value: _legendOnEnd,
                  title: 'Legend on end',
                  onChanged: (value) {
                    setState(() {
                      _legendOnEnd = value;
                    });
                  },
                ),
                ToggleItem(
                  value: _legendOnBottom,
                  title: 'Legend on bottom',
                  onChanged: (value) {
                    setState(() {
                      _legendOnBottom = value;
                    });
                  },
                ),
                ToggleItem(
                  value: _showLine,
                  title: 'Show line decoration',
                  onChanged: (value) {
                    setState(() {
                      _showLine = value;
                    });
                  },
                ),
                ToggleItem(
                  value: _smoothPoints,
                  title: 'Smooth line curve',
                  onChanged: (value) {
                    setState(() {
                      _smoothPoints = value;
                    });
                  },
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}



import 'dart:math';

import 'package:charts_painter/chart.dart';
import 'package:example/widgets/chart_options.dart';
import 'package:example/widgets/line_chart.dart';
import 'package:example/widgets/toggle_item.dart';
import 'package:flutter/material.dart';

class LineChartScreen extends StatefulWidget {
  LineChartScreen({Key? key}) : super(key: key);

  @override
  _LineChartScreenState createState() => _LineChartScreenState();
}

class _LineChartScreenState extends State<LineChartScreen> {
  Map<int, List<BubbleValue>> _values = <int, List<BubbleValue>>{};
  double targetMax = 0;
  bool _showValues = false;
  bool _smoothPoints = false;
  bool _fillLine = false;
  bool _showLine = true;
  bool _stack = true;
  int minItems = 15;

  @override
  void initState() {
    super.initState();
    _updateValues();
  }

  void _updateValues() {
    final Random _rand = Random();
    final double _difference = 2 + (_rand.nextDouble() * 15);

    targetMax =
        3 + (_rand.nextDouble() * _difference * 0.75) - (_difference * 0.25);
    _values.addAll(List.generate(3, (index) {
      List<BubbleValue<void>> _items = [];
      for (int i = 0; i < minItems; i++) {
        _items.add(BubbleValue<void>(2 + _rand.nextDouble() * _difference));
      }
      return _items;
    }).asMap());
  }

  void _addValues() {
    _values.addAll(List.generate(3, (index) {
      List<BubbleValue<void>> _items = [];
      for (int i = 0; i < minItems; i++) {
        _items.add(BubbleValue<void>(2 + Random().nextDouble() * targetMax));
      }
      return _items;
    }).asMap());
  }

  List<List<BubbleValue<void>>> _getMap() {
    return [
      _values[0]!.toList(),
      _values[1]!
          .asMap()
          .map<int, BubbleValue<void>>((index, e) {
            return MapEntry(index, e);
          })
          .values
          .toList(),
      _values[2]!
          .asMap()
          .map<int, BubbleValue<void>>((index, e) {
            return MapEntry(index, e);
          })
          .values
          .toList()
    ];
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          'Multi sparkline decoration',
        ),
      ),
      body: Column(
        children: [
          Center(
            child: Padding(
              padding: const EdgeInsets.all(24.0),
              child: Stack(
                children: [
                  LineChart<void>.multiple(
                    _getMap(),
                    stack: _stack,
                    height: MediaQuery.of(context).size.height * 0.4,
                    itemColor: Theme.of(context)
                        .colorScheme
                        .secondary
                        .withOpacity(_showLine ? 1.0 : 0.0),
                    lineWidth: 2.0,
                    chartItemOptions: BubbleItemOptions(
                      maxBarWidth: _showLine ? 0.0 : 6.0,
                      bubbleItemBuilder: (data) => BubbleItem(
                          color: [
                        Colors.black,
                        Colors.red,
                        Colors.blue
                      ][data.listIndex]),
                    ),
                    smoothCurves: _smoothPoints,
                    backgroundDecorations: [
                      GridDecoration(
                        showVerticalGrid: false,
                        showTopHorizontalValue: _showValues,
                        showVerticalValues: _showValues,
                        showHorizontalValues: _showValues,
                        horizontalAxisStep: _stack ? 3 : 1,
                        textStyle: Theme.of(context).textTheme.caption,
                        gridColor: Theme.of(context)
                            .colorScheme
                            .primaryContainer
                            .withOpacity(0.2),
                      ),
                      SparkLineDecoration(
                        id: 'first_line_fill',
                        smoothPoints: _smoothPoints,
                        fill: true,
                        lineColor: Theme.of(context)
                            .colorScheme
                            .secondary
                            .withOpacity(_fillLine
                                ? _stack
                                    ? 1.0
                                    : 0.2
                                : 0.0),
                        listIndex: 0,
                      ),
                      SparkLineDecoration(
                        id: 'second_line_fill',
                        smoothPoints: _smoothPoints,
                        fill: true,
                        lineColor: Theme.of(context)
                            .colorScheme
                            .primary
                            .withOpacity(_fillLine
                                ? _stack
                                    ? 1.0
                                    : 0.2
                                : 0.0),
                        listIndex: 1,
                      ),
                      SparkLineDecoration(
                        id: 'third_line_fill',
                        smoothPoints: _smoothPoints,
                        fill: true,
                        gradient: LinearGradient(
                            begin: Alignment.topCenter,
                            end: Alignment.bottomCenter,
                            colors: Colors.accents),
                        lineColor: Theme.of(context)
                            .colorScheme
                            .secondary
                            .withOpacity(_fillLine
                                ? _stack
                                    ? 1.0
                                    : 0.2
                                : 0.0),
                        listIndex: 2,
                      ),
                    ],
                    foregroundDecorations: [
                      SparkLineDecoration(
                        id: 'second_line',
                        lineWidth: 2.0,
                        smoothPoints: _smoothPoints,
                        lineColor: Theme.of(context)
                            .colorScheme
                            .primary
                            .withOpacity(_showLine ? 1.0 : 0.0),
                        listIndex: 1,
                      ),
                      SparkLineDecoration(
                        id: 'third_line',
                        lineWidth: 2.0,
                        smoothPoints: _smoothPoints,
                        gradient: LinearGradient(
                            begin: Alignment.centerLeft,
                            end: Alignment.centerRight,
                            colors: Colors.accents),
                        lineColor: Theme.of(context)
                            .colorScheme
                            .primary
                            .withOpacity(_showLine ? 1.0 : 0.0),
                        listIndex: 2,
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ),
          Flexible(
            child: ChartOptionsWidget(
              onRefresh: () {
                setState(() {
                  _values.clear();
                  _updateValues();
                });
              },
              onAddItems: () {
                setState(() {
                  minItems += 4;
                  _addValues();
                });
              },
              onRemoveItems: () {
                setState(() {
                  if (minItems > 6) {
                    minItems -= 4;
                    _values = _values.map((key, value) {
                      return MapEntry(key,
                          value..removeRange(value.length - 4, value.length));
                    });
                  }
                });
              },
              toggleItems: [
                ToggleItem(
                  title: 'Axis values',
                  value: _showValues,
                  onChanged: (value) {
                    setState(() {
                      _showValues = value;
                    });
                  },
                ),
                ToggleItem(
                  value: _smoothPoints,
                  title: 'Smooth line curve',
                  onChanged: (value) {
                    setState(() {
                      _smoothPoints = value;
                    });
                  },
                ),
                ToggleItem(
                  value: _fillLine,
                  title: 'Fill',
                  onChanged: (value) {
                    setState(() {
                      _fillLine = value;
                    });
                  },
                ),
                ToggleItem(
                  title: 'Stack lines',
                  value: _stack,
                  onChanged: (value) {
                    setState(() {
                      _stack = value;
                    });
                  },
                ),
                ToggleItem(
                  title: 'Show lines',
                  value: _showLine,
                  onChanged: (value) {
                    setState(() {
                      _showLine = value;
                    });
                  },
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}



import 'package:charts_painter/chart.dart';
import 'package:example/widgets/bar_chart.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';

final _batteryData = [
  26,
  24,
  25,
  45,
  60,
  75,
  80,
  80,
  80,
  80,
  80,
  80,
  80,
  80,
  80,
  80,
  80,
  80,
  80,
  80,
  84,
  88,
  92,
  98,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  95,
  92,
  90,
  90,
  88,
  88,
  86,
  86,
  86,
  86,
  85
];

class IosChartScreen extends StatefulWidget {
  IosChartScreen({Key? key}) : super(key: key);

  @override
  _IosChartScreenState createState() => _IosChartScreenState();
}

class _IosChartScreenState extends State<IosChartScreen> {
  int _currentState = 0;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        backgroundColor: Colors.white,
        appBar: AppBar(
          title: Text(
            'Apple battery chart',
          ),
        ),
        body: Padding(
          padding: const EdgeInsets.all(12.0),
          child: Center(
            child: ConstrainedBox(
              constraints: BoxConstraints(maxWidth: 500),
              child: SizedBox(
                height: 180,
                child: BarChart(
                  data: _batteryData
                      .map((e) => BarValue<void>(e.toDouble()))
                      .toList(),
                  height: MediaQuery.of(context).size.height * 0.18,
                  dataToValue: (BarValue value) => value.max ?? 0.0,
                  itemOptions: BarItemOptions(
                    padding: const EdgeInsets.symmetric(horizontal: 2.0),
                    minBarWidth: 4.0,
                    barItemBuilder: (data) {
                      return BarItem(
                        radius: const BorderRadius.vertical(
                          top: Radius.circular(24.0),
                        ),
                        color: CupertinoColors.systemGreen,
                      );
                    },
                  ),
                  backgroundDecorations: [
                    WidgetDecoration(
                      margin: const EdgeInsets.only(bottom: 12),
                      widgetDecorationBuilder:
                          (context, state, squareWidth, squareHeight) {
                        return Container(
                          child: Stack(
                            clipBehavior: Clip.none,
                            children: [
                              Positioned.fill(
                                child: Padding(
                                  padding: (state.defaultMargin +
                                          state.defaultPadding)
                                      .copyWith(bottom: 0),
                                  child: Stack(
                                    clipBehavior: Clip.none,
                                    children: [
                                      // First (Smaller) green rectangle area
                                      Positioned(
                                        top: 2.0,
                                        bottom: 36.0,
                                        left: squareWidth * 2,
                                        width: squareWidth * 4,
                                        child: Container(
                                          color: CupertinoColors.activeGreen
                                              .withOpacity(0.4),
                                        ),
                                      ),
                                      // Second (Bigger) green rectangle area
                                      Positioned(
                                        top: 2.0,
                                        bottom: 36.0,
                                        left: squareWidth * 20,
                                        width: squareWidth * 20,
                                        child: Container(
                                          color: CupertinoColors.activeGreen
                                              .withOpacity(0.4),
                                        ),
                                      ),
                                      // Bottom battery state indicator (green)
                                      Positioned(
                                        bottom: 30.0,
                                        height: 24.0,
                                        left: squareWidth * 2,
                                        child: Row(
                                          crossAxisAlignment:
                                              CrossAxisAlignment.end,
                                          children: [
                                            Container(
                                              height: 6.0,
                                              width: squareWidth * 4,
                                              decoration: ShapeDecoration(
                                                shape: StadiumBorder(),
                                                color:
                                                    CupertinoColors.systemGreen,
                                              ),
                                            ),
                                            // Indicator with pause icon
                                            Container(
                                              width: squareWidth * 14,
                                              child: Stack(
                                                clipBehavior: Clip.none,
                                                children: [
                                                  Positioned(
                                                    left: 0,
                                                    right: 0,
                                                    height: 6,
                                                    bottom: 0,
                                                    child: Container(
                                                      decoration:
                                                          ShapeDecoration(
                                                        shape: StadiumBorder(),
                                                        color: CupertinoColors
                                                            .systemGreen
                                                            .withOpacity(0.2),
                                                      ),
                                                    ),
                                                  ),
                                                  Positioned(
                                                    left: 0,
                                                    right: 0,
                                                    bottom: -6,
                                                    height: 18,
                                                    child: Center(
                                                      child: Container(
                                                        width: 18,
                                                        height: 18,
                                                        color: Colors.white,
                                                        child: Icon(
                                                          Icons.pause,
                                                          color: CupertinoColors
                                                              .systemGreen,
                                                          size: 20,
                                                        ),
                                                      ),
                                                    ),
                                                  )
                                                ],
                                              ),
                                            ),
                                            // Indicator with charge icon
                                            Container(
                                              width: squareWidth * 20,
                                              child: Stack(
                                                clipBehavior: Clip.none,
                                                children: [
                                                  Positioned(
                                                    left: 0,
                                                    right: 0,
                                                    height: 6,
                                                    bottom: 0,
                                                    child: Container(
                                                      decoration:
                                                          ShapeDecoration(
                                                        shape: StadiumBorder(),
                                                        color: CupertinoColors
                                                            .systemGreen,
                                                      ),
                                                    ),
                                                  ),
                                                  Positioned(
                                                    left: 0,
                                                    right: 0,
                                                    bottom: -6,
                                                    height: 18,
                                                    child: Center(
                                                      child: Container(
                                                        width: 18,
                                                        height: 18,
                                                        color: Colors.white,
                                                        child: Icon(
                                                          Icons
                                                              .electric_bolt_outlined,
                                                          color: CupertinoColors
                                                              .systemGreen,
                                                          size: 20,
                                                        ),
                                                      ),
                                                    ),
                                                  )
                                                ],
                                              ),
                                            ),
                                          ],
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                            ],
                          ),
                        );
                      },
                    ),
                    GridDecoration(
                      verticalAxisStep: 12,
                      horizontalAxisStep: 25,
                      endWithChartVertical: false,
                      endWithChartHorizontal: true,
                      showHorizontalValues: true,
                      gridWidth: 1.0,
                      gridColor: Colors.grey.shade300,
                      horizontalAxisValueFromValue: (index) =>
                          index % 2 == 0 ? '${index}%' : '',
                      horizontalValuesPadding:
                          const EdgeInsets.only(top: 8.0, left: 4.0),
                      verticalAxisValueFromIndex: (index) =>
                          '${(((index / 4) + 9) % 12).toStringAsFixed(0).padLeft(2, '0').replaceAll('00', '12 A')}',
                      textStyle: TextStyle(color: Colors.grey),
                      verticalTextAlign: TextAlign.start,
                      verticalValuesPadding:
                          const EdgeInsets.only(left: 4, bottom: 18.0),
                      showVerticalValues: true,
                    ),
                  ],
                ),
              ),
            ),
          ),
        ));
  }
}



